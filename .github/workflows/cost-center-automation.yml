name: GitHub Copilot Cost Center Automation

on:
  schedule:
    # Run every 6 hours (adjust as needed)
    - cron: '0 */6 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full

jobs:
  update-cost-centers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Test GitHub context and detect enterprise
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "=== GitHub Context Information ==="
        echo "Repository: ${{ github.repository }}"
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event Name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo ""
        echo "=== API Test: Get Repository Info ==="
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/repos/${{ github.repository }}" | jq -r '.owner | {login, type, html_url}'
        echo ""
        echo "=== Attempting Enterprise Detection ==="
        REPO_OWNER="${{ github.repository_owner }}"
        echo "Repository owner: $REPO_OWNER"
        
        # Test if this owner is an enterprise by trying to access enterprise API
        echo "Testing if '$REPO_OWNER' is an enterprise..."
        ENTERPRISE_TEST=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/enterprises/$REPO_OWNER" | jq -r '.slug // "NOT_FOUND"')
        
        if [ "$ENTERPRISE_TEST" != "NOT_FOUND" ]; then
          echo "✅ Success: '$REPO_OWNER' is a valid enterprise with slug: $ENTERPRISE_TEST"
          echo "GITHUB_ENTERPRISE=$REPO_OWNER" >> $GITHUB_ENV
        else
          echo "❌ Error: '$REPO_OWNER' is not a valid enterprise slug"
          echo "This might be a personal account or organization, not an enterprise"
          echo "Manual enterprise configuration will be needed"
          exit 1
        fi
    
    - name: Run incremental cost center update
      if: github.event.inputs.mode != 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --incremental --mode apply --yes --summary-report --verbose
    
    - name: Run full cost center update  
      if: github.event.inputs.mode == 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --mode apply --yes --summary-report --verbose
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cost-center-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Check for failures and notify
      if: failure()
      run: |
        echo "::error::Cost center automation failed. Check the logs for details."