name: GitHub Copilot Cost Center Automation

on:
  schedule:
    # Run every 6 hours (adjust as needed)
    - cron: '0 */6 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full
      enterprise_slug:
        description: 'Enterprise slug (optional - auto-detect if blank)'
        required: false
        type: string

jobs:
  update-cost-centers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Configure enterprise slug
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "=== Enterprise Configuration ==="
        
        # Check if enterprise slug was provided manually
        MANUAL_ENTERPRISE="${{ github.event.inputs.enterprise_slug }}"
        if [ -n "$MANUAL_ENTERPRISE" ]; then
          echo "‚úÖ Using manually provided enterprise slug: $MANUAL_ENTERPRISE"
          echo "GITHUB_ENTERPRISE=$MANUAL_ENTERPRISE" >> $GITHUB_ENV
          exit 0
        fi
        
        # Try multiple auto-detection methods
        echo "Attempting auto-detection from multiple sources..."
        ORG_NAME="${{ github.repository_owner }}"
        echo "Organization: $ORG_NAME"
        
        echo "=== Method 1: Organization API with enterprise scope ==="
        ORG_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                           -H "Accept: application/vnd.github+json" \
                           -H "X-GitHub-Api-Version: 2022-11-28" \
                           "${{ github.api_url }}/orgs/$ORG_NAME")
        ENTERPRISE_SLUG=$(echo "$ORG_RESPONSE" | jq -r '.enterprise.slug // "NOT_FOUND"')
        echo "Organization enterprise field: $ENTERPRISE_SLUG"
        
        if [ "$ENTERPRISE_SLUG" != "NOT_FOUND" ] && [ "$ENTERPRISE_SLUG" != "null" ]; then
          echo "‚úÖ Method 1 success: $ENTERPRISE_SLUG"
          echo "GITHUB_ENTERPRISE=$ENTERPRISE_SLUG" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "=== Method 2: User API (current authenticated user) ==="
        USER_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github+json" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            "${{ github.api_url }}/user")
        echo "User response keys:" $(echo "$USER_RESPONSE" | jq -r 'keys[]' | tr '\n' ' ')
        
        echo "=== Method 3: Installation API ==="
        # Try to get installation info which might include enterprise context
        INSTALL_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                               -H "Accept: application/vnd.github+json" \
                               -H "X-GitHub-Api-Version: 2022-11-28" \
                               "${{ github.api_url }}/repos/${{ github.repository }}/installation" 2>/dev/null || echo '{"error": "no_installation"}')
        echo "Installation response: $INSTALL_RESPONSE"
        
        echo "=== Method 4: Search for enterprise in org memberships ==="
        # Check current user's organizations to find enterprise links
        USER_ORGS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github+json" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        "${{ github.api_url }}/user/orgs")
        echo "User organizations count: $(echo "$USER_ORGS" | jq '. | length')"
        
        # Look for enterprise info in any of the user's orgs
        for org in $(echo "$USER_ORGS" | jq -r '.[].login'); do
          echo "Checking org: $org"
          if [ "$org" = "$ORG_NAME" ]; then
            ORG_DETAIL=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                             -H "Accept: application/vnd.github+json" \
                             -H "X-GitHub-Api-Version: 2022-11-28" \
                             "${{ github.api_url }}/orgs/$org")
            ENT_CHECK=$(echo "$ORG_DETAIL" | jq -r '.enterprise.slug // "NOT_FOUND"')
            if [ "$ENT_CHECK" != "NOT_FOUND" ] && [ "$ENT_CHECK" != "null" ]; then
              echo "‚úÖ Method 4 success: Found enterprise in org details: $ENT_CHECK"
              echo "GITHUB_ENTERPRISE=$ENT_CHECK" >> $GITHUB_ENV
              exit 0
            fi
          fi
        done
        
        echo "‚ùå All auto-detection methods failed"
        echo "üí° Solution: Re-run workflow and provide enterprise slug manually"
        echo "   - Click 'Run workflow'"  
        echo "   - Fill in 'Enterprise slug' field with your enterprise name"
        echo "   - The enterprise slug is typically the name after /enterprises/ in your GitHub Enterprise URL"
        exit 1
    
    - name: Run incremental cost center update
      if: github.event.inputs.mode != 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --incremental --mode apply --yes --summary-report --verbose
    
    - name: Run full cost center update  
      if: github.event.inputs.mode == 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --mode apply --yes --summary-report --verbose
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cost-center-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Check for failures and notify
      if: failure()
      run: |
        echo "::error::Cost center automation failed. Check the logs for details."