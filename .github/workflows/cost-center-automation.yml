name: GitHub Copilot Cost Center Automation

on:
  schedule:
    # Run every 6 hours (adjust as needed)
    - cron: '0 */6 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full

jobs:
  update-cost-centers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Auto-detect enterprise from organization
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "=== Detecting Enterprise from Organization ==="
        ORG_NAME="${{ github.repository_owner }}"
        echo "Organization: $ORG_NAME"
        
        # Get organization info including enterprise details
        echo "Querying organization API..."
        ORG_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                           -H "Accept: application/vnd.github+json" \
                           "${{ github.api_url }}/orgs/$ORG_NAME")
        
        # Extract enterprise slug from organization response
        ENTERPRISE_SLUG=$(echo "$ORG_RESPONSE" | jq -r '.enterprise.slug // "NOT_FOUND"')
        
        if [ "$ENTERPRISE_SLUG" != "NOT_FOUND" ] && [ "$ENTERPRISE_SLUG" != "null" ]; then
          echo "✅ Success: Organization '$ORG_NAME' belongs to enterprise: $ENTERPRISE_SLUG"
          echo "GITHUB_ENTERPRISE=$ENTERPRISE_SLUG" >> $GITHUB_ENV
          echo "Enterprise detection successful!"
        else
          echo "❌ Error: Could not detect enterprise from organization '$ORG_NAME'"
          echo "Organization response: $ORG_RESPONSE"
          echo "This organization may not be part of an enterprise"
          exit 1
        fi
    
    - name: Run incremental cost center update
      if: github.event.inputs.mode != 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --incremental --mode apply --yes --summary-report --verbose
    
    - name: Run full cost center update  
      if: github.event.inputs.mode == 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.COPILOT_GITHUB_TOKEN }}
      run: |
        echo "Using enterprise: $GITHUB_ENTERPRISE"
        python main.py --create-cost-centers --assign-cost-centers --mode apply --yes --summary-report --verbose
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cost-center-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Check for failures and notify
      if: failure()
      run: |
        echo "::error::Cost center automation failed. Check the logs for details."