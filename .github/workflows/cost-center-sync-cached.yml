name: Cost Center Sync with Caching

on:
  schedule:
    # Run every 6 hours (can be adjusted based on needs)
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Execution mode'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
      clear_cache:
        description: 'Clear cost center cache before running'
        required: false
        default: false
        type: boolean

jobs:
  sync-cost-centers:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Restore cost center cache
        uses: actions/cache@v4
        with:
          path: .cache/
          key: cost-center-cache-${{ github.repository }}-${{ hashFiles('**/config.yaml') }}
          restore-keys: |
            cost-center-cache-${{ github.repository }}-
            cost-center-cache-
            
      - name: Show cache statistics (before)
        run: |
          python main.py --cache-stats
          
      - name: Clear cache if requested
        if: ${{ inputs.clear_cache == 'true' }}
        run: |
          echo "Clearing cost center cache as requested..."
          python main.py --clear-cache
          
      - name: Clean up expired cache entries
        run: |
          python main.py --cache-cleanup
          
      - name: Run cost center sync (teams mode)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ENTERPRISE: ${{ vars.GITHUB_ENTERPRISE }}
        run: |
          MODE="${{ inputs.mode || 'plan' }}"
          echo "Running cost center sync in $MODE mode..."
          
          if [ "$MODE" = "apply" ]; then
            python main.py --teams-mode --assign-cost-centers --mode apply --yes
          else
            python main.py --teams-mode --assign-cost-centers --mode plan
          fi
          
      - name: Show cache statistics (after)
        if: always()
        run: |
          python main.py --cache-stats
          
      - name: Upload cache statistics as artifact
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: cache-stats-${{ github.run_number }}
          path: |
            .cache/
          retention-days: 7
          
  performance-report:
    runs-on: ubuntu-latest
    needs: sync-cost-centers
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Download cache artifacts
        uses: actions/download-artifact@v6
        with:
          name: cache-stats-${{ github.run_number }}
          path: .cache/
          
      - name: Generate performance report
        run: |
          echo "# Cost Center Sync Performance Report" > performance-report.md
          echo "" >> performance-report.md
          echo "**Run:** ${{ github.run_number }}" >> performance-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> performance-report.md
          echo "**Mode:** ${{ inputs.mode || 'plan' }}" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Cache Performance" >> performance-report.md
          echo "" >> performance-report.md
          echo '```' >> performance-report.md
          python main.py --cache-stats >> performance-report.md 2>&1 || true
          echo '```' >> performance-report.md
          
      - name: Upload performance report
        uses: actions/upload-artifact@v5
        with:
          name: performance-report-${{ github.run_number }}
          path: performance-report.md
          retention-days: 30